@use "sass:string";

//
@mixin make-func($selector) {
    @if (string.slice($selector, 1, 1) == "@") {
        @#{string.slice($selector, 2)} { @content; }
    } @else {
        @#{$selector} { @content; }
    }
}

//
@function if-cond($c, $a, $b) { @return #{"if(\
    #{$c}: #{$a};\
     else: #{$b};\
)"}; }

//
@property --c2h-ct { syntax: "<number>"; initial-value: 0; inherits: true; };

//
@include make-func("@function --c2h-triple-mix(\
--c2h-a <color>, \
--c2h-b <color>, \
--c2h-c <color>, \
--c2h-factor <number> \
)") {
    --c2h-t : clamp(0, var(--c2h-factor, 0), 1);
    --c2h-ct: clamp(0, round(nearest, var(--c2h-t), 1), 1);
    --c2h-dz: clamp(0, calc(var(--c2h-t) * 2 - 1), 1);
    --c2h-lz: clamp(0, calc(var(--c2h-t) * 2 - 0), 1);

    /* */
    --c2h-lc: color-mix(in oklch, var(--c2h-a) calc((1 - var(--c2h-u)) * 100%), var(--c2h-b) calc(var(--c2h-u) * 100%));
    --c2h-dc: color-mix(in oklch, var(--c2h-b) calc((1 - var(--c2h-u)) * 100%), var(--c2h-c) calc(var(--c2h-u) * 100%));

    /* */
    --c2h-u: calc(
        var(--c2h-ct) * var(--c2h-dz) +
        (1 - var(--c2h-ct)) * var(--c2h-lz)
    );
    result: color-mix(in oklch,
        var(--c2h-lc) calc((1 - var(--c2h-ct)) * 100%),
        var(--c2h-dc) calc(var(--c2h-ct) * 100%)
    );
}

//
@include make-func("@function --c2h-re-shading(\
--c2h-color <color>, \
--c2h-factor: 1 \
)") {
    /* chromatic neutralize (unused) ir chromatic, or make very chromatic if too gray */
    --c2h-chromatic-inverse-ls: oklch(from var(--c2h-color) l calc(1 - c) h);
    --c2h-chromatic-inverse-ds: oklch(from var(--c2h-color) l calc(1 - c) h);
    --c2h-chromatic-inverse: light-dark(var(--c2h-chromatic-inverse-ls), var(--c2h-chromatic-inverse-ds));

    /* from light source colors (l > 0.5, not very chromatic) */
    --c2h-lightness-extract-ls: oklch(from var(--c2h-color) 0.99 calc(c * 0.2) h);  /* most light */
    --c2h-chromatic-extract-ls: oklch(from var(--c2h-color) l calc(c * 0.5) h);  /* most chromatic */
    --c2h-lightness-inverse-ls: oklch(from var(--c2h-color) 0.01 calc(c * 0.2) h);  /* most dark */

    /* From dark source colors (l < 0.5, not very chromatic) */
    --c2h-lightness-extract-ds: oklch(from var(--c2h-color) 0.08 calc(c * 0.1) h);  /* most light */
    --c2h-chromatic-extract-ds: oklch(from var(--c2h-color) l calc(c * 0.35) h);  /* most chromatic */
    --c2h-lightness-inverse-ds: oklch(from var(--c2h-color) 0.99 calc(c * 0.1) h);  /* most dark (almost black) */

    /* */
    --c2h-lightness-extract: light-dark(var(--c2h-lightness-extract-ls), var(--c2h-lightness-extract-ds));
    --c2h-chromatic-extract: light-dark(var(--c2h-chromatic-extract-ls), var(--c2h-chromatic-extract-ds));
    --c2h-lightness-inverse: light-dark(var(--c2h-lightness-inverse-ls), var(--c2h-lightness-inverse-ds));

    /* */
    result: --c2h-triple-mix(
        var(--c2h-lightness-inverse),
        var(--c2h-chromatic-extract),
        var(--c2h-lightness-extract),
        var(--c2h-factor, 0)
    );
}



/* */
@include make-func("@function --c2-surface(\
--c2-shift    <number>: 1, \
--c2-color     <color>: var(--current, inherit) \
)")
    { result: --c2h-re-shading(var(--c2-color, inherit), calc(0.96 - var(--c2-shift, 1) * 0.8)); };

/* */
@include make-func("@function --c2-on-surface(\
--c2-shift      <number>: 1, \
--c2-color       <color>: var(--current, inherit) \
)")
    { result: --c2h-re-shading(var(--c2-color, inherit), calc(0.02 + var(--c2-shift, 1) * 0.2)); };



/* */
@include make-func("@function --c2-contrast(\
--c2-shift    <number>: 1, \
--c2-color     <color>: var(--current, inherit) \
)")
    { result: --c2h-re-shading(var(--c2-color, inherit), calc(1 - var(--c2-shift, 1) * 0.9)); };

/* */
@include make-func("@function --c2-on-contrast(\
--c2-shift      <number>: 1, \
--c2-color       <color>: var(--current, inherit) \
)")
    { result: --c2h-re-shading(var(--c2-color, inherit), calc(0.01 + var(--c2-shift, 1) * 0.1)); };

/* */
@property --primary { syntax: "<color>"; initial-value: #fff; inherits: true; };
@property --current { syntax: "<color>"; initial-value: #fff; inherits: true; };
@property --current-is-light { syntax: "<number>"; initial-value: 1; inherits: true; };

/* */
@property --background-tone-shift { syntax: "<number>"; initial-value: 0.0; inherits: true; };
@property --color-tone-shift { syntax: "<number>"; initial-value: 0.0; inherits: true; };
@property --icon-tone-shift { syntax: "<number>"; initial-value: 0.0; inherits: true; };
@property --accent-tone-shift { syntax: "<number>"; initial-value: 0.0; inherits: true; };
@property --scrollbar-tone-shift { syntax: "<number>"; initial-value: 0.0; inherits: true; };


// =============================================================================
// THEME-SPECIFIC OVERRIDES
// =============================================================================



@mixin implement-theme($name) {
    $on: "on-surface";

    .c2-#{$name} {
        & {
            background-color: --c2-#{$name}(var(--background-tone-shift, 0.0), var(--current, inherit));
            color: --c2-#{$on}(var(--color-tone-shift, 0.0), var(--current, currentColor));
            --icon-color: --c2-#{$on}(var(--icon-tone-shift, 0.0), var(--current, currentColor));
            scrollbar-color: --c2-#{$on}(var(--scrollbar-tone-shift, 0.0), var(--current, transparent)) transparent;
            accent-color: --c2-#{$on}(var(--accent-tone-shift, 0.0), var(--current, transparent));
            border-color: --c2-#{$on}(var(--border-tone-shift, 0.0), var(--current, transparent));
            outline-color: --c2-#{$on}(var(--outline-tone-shift, 0.0), var(--current, transparent));
            text-decoration-color: --c2-#{$on}(var(--text-decoration-tone-shift, 0.0), var(--current, transparent));
            text-emphasis-color: --c2-#{$on}(var(--text-emphasis-tone-shift, 0.0), var(--current, transparent));
            fill-color: --c2-#{$on}(var(--fill-tone-shift, 0.0), var(--current, transparent));
            stroke-color: --c2-#{$on}(var(--stroke-tone-shift, 0.0), var(--current, transparent));
        }

        svg {
            fill-color: --c2-#{$on}(var(--fill-tone-shift, 0.0), var(--current, transparent));
            stroke-color: --c2-#{$on}(var(--stroke-tone-shift, 0.0), var(--current, transparent));
        }

        &::selection {
            background-color: --c2-#{$on}(var(--selection-tone-shift, 0.0), var(--current, transparent));
            color: --c2-#{$name}(var(--selection-tone-shift, 0.0), var(--current, currentColor));
            --icon-color: --c2-#{$on}(var(--selection-tone-shift, 0.0), var(--current, currentColor));
        }
    }
}



/* */
@layer ux-ctm {

    /* Legacy */
    :root, :scope, :host {
        --primary: #469;
        --secondary: oklch(from var(--primary) l c calc(h + 120));
        --trinary: oklch(from var(--primary) l c calc(h + 240));
        --current: var(--primary);

        //
        @media(prefers-color-scheme: dark) { color-scheme: dark; }
        @media(prefers-color-scheme: light) { color-scheme: light; }

        //
        & { color-scheme: light; };
        &[data-scheme="dark"] { color-scheme: only dark; };
        &[data-scheme="light"] { color-scheme: only light; };
        &[data-scheme="system"] { color-scheme: light dark; };
        &[data-scheme="auto"] { color-scheme: light dark; };
    }

    //
    :host {
        --secondary: inherit;
        --trinary: inherit;
        --primary: inherit;
        --current: inherit;
        color-scheme: inherit;
    }

    //
    @include implement-theme("surface");
    @include implement-theme("contrast");

    //
    .c2-transparent {
        background-color: transparent;
    }

}
