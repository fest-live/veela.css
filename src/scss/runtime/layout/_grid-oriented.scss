@use "./Mixins" as mx;

//
@layer ux-grid-layout {

    //
    .ui-gridlayout {
        @include mx.compute_orient_grid_layout();

        //
        & {
            --c-gap: clamp(min(1rem, 8cqmin), min(calc(8cqmin / min(var(--layout-c, 4), var(--layout-r, 8))), calc(6cqmax / max(var(--layout-c, 4), var(--layout-r, 8)))), min(4rem, 16cqmin));
            --r-gap: clamp(min(1rem, 8cqmin), min(calc(8cqmin / min(var(--layout-c, 4), var(--layout-r, 8))), calc(6cqmax / max(var(--layout-c, 4), var(--layout-r, 8)))), min(4rem, 16cqmin));
        }

        //
        & {
            //display: block flow;
            display: block grid;
            position: relative;

            //
            container-name: u2-grid;
            container-type: normal;
            //container-type: size;
            contain: none;

            //
            zoom: 1;
            direction: ltr;

            //
            pointer-events: none;
            background-color: transparent;

            //
            inline-size: 100%;
            block-size: 100%;
            padding: 0px;
            overflow: visible;

            //
            grid-template-columns: repeat(var(--cs-layout-c, 4), minmax(0px, 1fr));
            grid-template-rows: repeat(var(--cs-layout-r, 8), minmax(0px, 1fr));
            //grid-column-gap: var(--c-gap, 1rem);
            //grid-row-gap: var(--r-gap, 1rem);

            //
            justify-content: safe start !important;
            align-content: safe start !important;
            justify-items: safe start !important;
            align-items: safe start !important;
        }

        //
        & > :where(*) {
            @include mx.compute_grid_item_cell();

            // calculate visible size
            & { --item-size: min((100cqmin / min(calc(var(--layout-c, 4) / var(--ox-c-span, 1)), calc(var(--layout-r, 8) / var(--ox-r-span, 1)))) - 0.5 * min(var(--c-gap, 1rem), var(--r-gap, 1rem)), 6rem); }
            & * {--drag-x: 0; --drag-y: 0; }

            // dragging coordinate
            & {
                --drag-x: 0; --cs-drag-x: calc(var(--drag-x, 0) * 1px);
                --drag-y: 0; --cs-drag-y: calc(var(--drag-y, 0) * 1px);
            }

            //
            & {
                position: relative !important;
                z-index: 1;
                //position: absolute;;
                transform-origin: 0% 0%;
                transform:
                    translate3d(
                        round(nearest, calc(var(--cs-drag-x, 0px) + var(--cs-transition-c, 0px)), calc(1px / var(--pixel-ratio, 1))),
                        round(nearest, calc(var(--cs-drag-y, 0px) + var(--cs-transition-r, 0px)), calc(1px / var(--pixel-ratio, 1))),
                        0px)
                    scale3d(var(--scale, 1), var(--scale, 1), var(--scale, 1))
                    translate3d(
                        round(nearest, calc(var(--translate-x, 0px) - 50%), calc(1px / var(--pixel-ratio, 1))),
                        round(nearest, calc(var(--translate-y, 0px) - 50%), calc(1px / var(--pixel-ratio, 1))),
                        0px) !important;
                translate: 0px 0px 0px;

                //
                inset: 0px;
                inset-block-start: calc(var(--cs-sw-unit-y, 1px) * 0.5);
                inset-inline-start: calc(var(--cs-sw-unit-x, 1px) * 0.5);

                //
                grid-column: round(nearest, var(--cs-grid-c, 1), 1);
                grid-row: round(nearest, var(--cs-grid-r, 1), 1);

                //
                zoom: 1;
                place-self: start;

                //
                min-inline-size: 1px;
                min-block-size: 1px;

                //
                inline-size: 100%;//max-content;
                block-size: 100%;//max-content;

                //
                max-inline-size: var(--item-size, 1px);
                max-block-size: var(--item-size, 1px);

                //
                pointer-events: none;
                touch-action: none;
                user-select: none;
                -webkit-user-drag: none;
                -moz-user-drag: none;

                //
                overflow: visible;
            }

            //
            & {
                transition-behavior: allow-discrete;
                transition-property: transform;
                transition-duration: calc(var(--drag-d, 0.01) * 0.8ms);
                transition-timing-function: linear ;
                transition-delay: 0ms;
            }

            // if interpolation keywords supported
            @supports (min-inline-size: max(1px, max-content)) {
                min-inline-size: max(1px, max-content);
                min-block-size: max(1px, max-content);
            }

            //
            & > :where(*) {
                inline-size: 100%;
                block-size: 100%;
            }
        }
    }
}
